from typing import Tuple, Iterator, Any
import grpc
import os
import sys
# Adding protos module path if needed
script_dir = os.path.dirname(os.path.abspath(__file__))
proto_module = os.path.join(script_dir, "protos")
if proto_module not in sys.path:
    # Insert the protos modules path at the beginning of sys.path (to give it higher priority)
    sys.path.insert(0, proto_module)
from functools import partial
import logging
from generated.clients.python.protos.sylklabs.core import configs_pb2 as configs_, configs_pb2_grpc as configs__grpc
from generated.clients.python.protos.sylklabs.core import task_pb2 as task_, task_pb2_grpc as task__grpc
from generated.clients.python.protos.sylklabs.scheduler.v1 import scheduler_worker_pb2 as scheduler_worker_v1, scheduler_worker_pb2_grpc as scheduler_worker_v1_grpc
from generated.clients.python.protos.sylklabs.scheduler.v1 import scheduler_pb2 as scheduler_v1, scheduler_pb2_grpc as scheduler_v1_grpc
from google.protobuf import any_pb2
from google.protobuf import timestamp_pb2
from google.protobuf import struct_pb2
from google.protobuf import wrappers_pb2
from google.protobuf import duration_pb2
from google.protobuf import empty_pb2
from google.protobuf import field_mask_pb2

# For available channel options in python visit https://github.com/grpc/grpc/blob/v1.46.x/include/grpc/impl/codegen/grpc_types.h
_CHANNEL_OPTIONS = (("grpc.keepalive_permit_without_calls", 1),
	("grpc.keepalive_time_ms", 120000),
	("grpc.keepalive_timeout_ms", 20000),
	("grpc.http2.min_time_between_pings_ms", 120000),
	("grpc.http2.max_pings_without_data", 1),)

# Global metadata
_METADATA = (('sylk-version','0.4.0'),)

# Global auth key that will be verified by sylk client
_GLOBAL_AUTH_KEY = None

# Generated thanks to [sylk.build](https://www.sylk.build)



class SchedulerService_v1:
	"""
	service class generated by sylk.build

	File: sylklabs.scheduler.v1.SchedulerService
	Service: SchedulerService
	Version: v1
	"""

	def __init__(self,channel: grpc.ChannelCredentials = None, client_opt = {}):
		logging.root.setLevel(client_opt.get('log_level','ERROR'))
		if channel is None:
			self.channel = grpc.insecure_channel('localhost:{}'.format(client_opt.get('port',44880)),_CHANNEL_OPTIONS)
			try:
				grpc.channel_ready_future(self.channel).result(timeout=client_opt.get('timeout',10))
			except grpc.FutureTimeoutError:
				logging.error('Timedout: server seems to be offline. verify your connection configs.')
				sys.exit(1)
		else:
			self.channel = channel
		self.SchedulerService_v1_stub = scheduler_v1_grpc.SchedulerServiceStub(self.channel)

	def Execute_WithCall(self, request: scheduler_v1.ExecuteRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[scheduler_v1.ExecuteResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.SchedulerService_v1_stub.Execute.with_call(request,metadata=metadata)

	
	def Execute(self, request: scheduler_v1.ExecuteRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> scheduler_v1.ExecuteResponse:
		"""sylk - """
		return self.SchedulerService_v1_stub.Execute(request,metadata=metadata)

	
	def Schedule_WithCall(self, request: scheduler_v1.ScheduleRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[scheduler_v1.ScheduleResponse, Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.SchedulerService_v1_stub.Schedule.with_call(request,metadata=metadata)

	
	def Schedule(self, request: scheduler_v1.ScheduleRequest, metadata: Tuple[Tuple[str,str]] = _METADATA) -> scheduler_v1.ScheduleResponse:
		"""sylk - """

		return self.SchedulerService_v1_stub.Schedule(request,metadata=metadata)


class SchedulerWorkerService_v1:
	"""
	service class generated by sylk.build

	File: sylklabs.scheduler.v1.SchedulerWorkerService
	Service: SchedulerWorkerService
	Version: v1
	"""

	def __init__(self,channel: grpc.ChannelCredentials = None, client_opt = {}):
		logging.root.setLevel(client_opt.get('log_level','ERROR'))
		if channel is None:
			self.channel = grpc.insecure_channel('{0}:{1}'.format(client_opt.get('host','localhost'), client_opt.get('port',44880)),_CHANNEL_OPTIONS)
			try:
				grpc.channel_ready_future(self.channel).result(timeout=client_opt.get('timeout',10))
			except grpc.FutureTimeoutError:
				logging.error('Timedout: server seems to be offline. verify your connection configs.')
				sys.exit(1)
		else:
			self.channel = channel
		self.SchedulerWorkerService_v1_stub = scheduler_worker_v1_grpc.SchedulerWorkerServiceStub(self.channel)

	def Communicate_WithCall(self, request: Iterator[scheduler_worker_v1.WorkerMessage], metadata: Tuple[Tuple[str,str]] = _METADATA) -> Tuple[Iterator[scheduler_worker_v1.SchedulerMessage], Any]:
		"""sylk -  Returns: RPC output and a call object"""

		return self.SchedulerWorkerService_v1_stub.Communicate.with_call(request,metadata=metadata)

	
	def Communicate(self, request: Iterator[scheduler_worker_v1.WorkerMessage], metadata: Tuple[Tuple[str,str]] = _METADATA) -> Iterator[scheduler_worker_v1.SchedulerMessage]:
		"""sylk - """

		return self.SchedulerWorkerService_v1_stub.Communicate(request,metadata=metadata)