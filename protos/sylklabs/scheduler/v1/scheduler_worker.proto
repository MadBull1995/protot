// Generated by sylk.build
syntax = "proto3";

package sylklabs.scheduler.v1;



import "sylklabs/core/task.proto";

service SchedulerWorkerService {
	// The Communicate RPC method sets up a bidirectional stream between// the scheduler and a worker node.
	rpc Communicate (stream sylklabs.scheduler.v1.WorkerMessage) returns (stream sylklabs.scheduler.v1.SchedulerMessage);
}

// Message for worker node registration
message RegistrationRequest {

	string worker_id = 1;
	repeated string supported_tasks = 2;
	string magic_cookie = 3;
}

message Ack {

	sylklabs.scheduler.v1.WorkerChannelStatus status = 1;
	string message = 2;
}

message Disconnect {

	string message = 1;
}

message AssignTaskRequest {

	sylklabs.core.Task task = 1;
}

message TaskCompletion {

	string task_id = 1;
	sylklabs.core.TaskState state = 2;
}

message WorkerMessage {

	oneof worker_message_type {
		sylklabs.scheduler.v1.RegistrationRequest registration = 1;
		sylklabs.scheduler.v1.TaskCompletion completion = 2;
	};
}

// Scheduler source messages can be one of the following types
message SchedulerMessage {

	oneof scheduler_message_type {
		sylklabs.scheduler.v1.Ack ack = 1;
		sylklabs.scheduler.v1.AssignTaskRequest assign_task = 2;
		sylklabs.scheduler.v1.Disconnect disconnect = 3;
	};
}


enum WorkerChannelStatus {
	UNKNOWN_CHANNEL_STATUS = 0;
	READY = 1;
	CLOSED = 2;
}