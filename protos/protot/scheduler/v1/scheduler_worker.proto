// Copyright 2023 The ProtoT Authors
//
// Licensed under the Apache License, Version 2.0 (the \"License\");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an \"AS IS\" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Generated by sylk.build
syntax = "proto3";

package protot.scheduler.v1;



import "protot/core/task.proto";
import "protot/metrics/v1/metrics.proto";
import "google/protobuf/empty.proto";

service SchedulerWorkerService {
	// The Communicate RPC method sets up a bidirectional stream between// the scheduler and a worker node.
	rpc Communicate (stream protot.scheduler.v1.WorkerMessage) returns (stream protot.scheduler.v1.SchedulerMessage);
}

// Message for worker node registration
message RegistrationRequest {

	string worker_id = 1;
	repeated string supported_tasks = 2;
	string magic_cookie = 3;
}

message Ack {

	protot.scheduler.v1.WorkerChannelStatus status = 1;
	string message = 2;
}

message Disconnect {

	string message = 1;
}

message AssignTaskRequest {

	protot.core.Task task = 1;
	string execution_id = 2;
}

message Pong {

	protot.metrics.v1.WorkerMetrics metrics = 1;
}

message TaskCompletion {

	string task_id = 1;
	protot.core.TaskState state = 2;
	string execution_id = 3;
}

message WorkerMessage {

	oneof worker_message_type {
		protot.scheduler.v1.RegistrationRequest registration = 1;
		protot.scheduler.v1.TaskCompletion completion = 2;
		protot.scheduler.v1.Pong heartbeat = 3;
	};
}

// Scheduler source messages can be one of the following types
message SchedulerMessage {

	oneof scheduler_message_type {
		protot.scheduler.v1.Ack ack = 1;
		protot.scheduler.v1.AssignTaskRequest assign_task = 2;
		protot.scheduler.v1.Disconnect disconnect = 3;
		google.protobuf.Empty heartbeat = 4;
	};
}


enum WorkerChannelStatus {
	UNKNOWN_CHANNEL_STATUS = 0;
	READY = 1;
	CLOSED = 2;
}